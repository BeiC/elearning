{
  "name": "lockit-mongodb-adapter",
  "version": "0.4.0",
  "description": "MongoDB adapter for lockit",
  "main": "index.js",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zeMirco/lockit-mongodb-adapter"
  },
  "keywords": [
    "lockit",
    "mongodb",
    "adapter"
  ],
  "author": {
    "name": "Mirco Zeiss",
    "email": "mirco.zeiss@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "node-uuid": "~1.4.1",
    "ms": "~0.6.2",
    "moment": "~2.5.0",
    "mongodb": "~1.3.23",
    "couch-pwd": "0.0.1"
  },
  "devDependencies": {
    "should": "~2.1.1",
    "grunt-mocha-test": "~0.8.1",
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.8.0"
  },
  "readme": "# Lockit MongoDB adapter\n\n[![Build Status](https://travis-ci.org/zeMirco/lockit-mongodb-adapter.svg?branch=master)](https://travis-ci.org/zeMirco/lockit-mongodb-adapter) [![NPM version](https://badge.fury.io/js/lockit-mongodb-adapter.svg)](http://badge.fury.io/js/lockit-mongodb-adapter)\n\nMongoDB adapter for [Lockit](https://github.com/zeMirco/lockit).\n\n## Installation\n\n`npm install lockit-mongodb-adapter`\n\n```js\nvar adapter = require('lockit-mongodb-adapter');\n```\n\n## Configuration\n\nThe following setting is required.\n\n```js\nexports.db = {\n  url: 'mongodb://127.0.0.1/',\n  name: 'test',\n  collection: 'users'\n};\n```\n\n## Features\n\n### 1. Create user\n\n`adapter.save(name, email, pass, callback)`\n\n - `name`: String - i.e. 'john'\n - `email`: String - i.e. 'john@email.com'\n - `pass`: String - i.e. 'password123'\n - `callback`: Function - `callback(err, user)` where `user` is the new user now in our database.\n\nThe `user` object has the following properties\n\n - `name`: username chosen during sign up\n - `email`: email that was provided at the beginning\n - `signupTimestamp`: Date object to remember when the user signed up\n - `signupToken`: unique token sent to user's email for email verification\n - `signupTokenExpires`: Date object usually 24h ahead of `signupTimestamp`\n - `failedLoginAttempts`: save failed login attempts during login process, default is `0`\n - `salt`: salt generated by `crypto.randomBytes()`\n - `derived_key`: password hash generated by pbkdf2\n - `_id`: document id\n\n```js\nadapter.save('john', 'john@email.com', 'secret', function(err, user) {\n  if (err) console.log(err);\n  console.log(user);\n  // {\n  //  name: 'john',\n  //  email: 'john@email.com',\n  //  signupToken: 'ef32a95a-d6ee-405a-8e4b-515b235f7c54',\n  //  signupTimestamp: Wed Jan 15 2014 19:08:27 GMT+0100 (CET),\n  //  signupTokenExpires: Wed Jan 15 2014 19:08:27 GMT+0100 (CET),\n  //  failedLoginAttempts: 0,\n  //  salt: '48cf9da376703199c30ba5c274580c98',\n  //  derived_key: '502967e5a6e55091f4c2c80e7989623f051070fd',\n  //  _id: 52d6ce9b651b4d825351641f\n  // }\n});\n```\n\n### 2. Find user\n\n`adapter.find(match, query, callback)`\n\n - `match`: String - one of the following: 'name', 'email' or 'signupToken'\n - `query`: String - corresponds to `match`, i.e. 'john@email.com'\n - `callback`:  Function - `callback(err, user)`\n\n```js\nadapter.find('name', 'john', function(err, user) {\n  if (err) console.log(err);\n  console.log(user);\n  // {\n  //   name: 'john',\n  //   email: 'john@email.com',\n  //   signupToken: '3a7f0f54-32f0-44f7-97c6-f1470b94c170',\n  //   signupTimestamp: Fri Apr 11 2014 21:31:54 GMT+0200 (CEST),\n  //   signupTokenExpires: Sat Apr 12 2014 21:31:54 GMT+0200 (CEST),\n  //   failedLoginAttempts: 0,\n  //   salt: '753981e8d8e30e8047cf5685d1f0a0d4',\n  //   derived_key: '18ce03eddab6729aeaaf76729c90cb31f16a863c',\n  //   _id: 5348432a98a8a6a4fef1f595\n  // }\n});\n```\n\n### 3. Update user\n\n`adapter.update(user, callback)`\n\n - `user`: Object - must have `_id` and `_rev` properties\n - `callback`: Function - `callback(err, user)` - `user` is the updated user object\n\n```js\n// get a user from db first\nadapter.find('name', 'john', function(err, user) {\n  if (err) console.log(err);\n\n  // add some new properties to our existing user\n  user.newKey = 'and some value';\n  user.hasBeenUpdated = true;\n\n  // save updated user to db\n  adapter.update(user, function(err, user) {\n    if (err) console.log(err);\n    // ...\n  });\n});\n```\n\n### 4. Remove user\n\n`adapter.remove(name, callback)`\n\n - `name`: String\n - `callback`: Function - `callback(err, res)` - `res` is `true` if everything went fine\n\n```js\nadapter.remove('john', function(err, res) {\n  if (err) console.log(err);\n  console.log(res);\n  // true\n});\n```\n\n## Test\n\n`grunt`\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zeMirco/lockit-mongodb-adapter/issues"
  },
  "homepage": "https://github.com/zeMirco/lockit-mongodb-adapter",
  "_id": "lockit-mongodb-adapter@0.4.0",
  "_from": "lockit-mongodb-adapter@"
}
