{
  "name": "lockit-sql-adapter",
  "version": "0.5.0",
  "description": "SQL adapter for lockit. Works with PostgreSQL, MySQL, SQLite and MariaDB",
  "main": "index.js",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zeMirco/lockit-sql-adapter"
  },
  "keywords": [
    "lockit",
    "sql",
    "adpater",
    "postgresql",
    "mysql",
    "sqlite",
    "mariadb"
  ],
  "author": {
    "name": "Mirco Zeiss",
    "email": "mirco.zeiss@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "ms": "~0.6.2",
    "uuid": "~1.4.1",
    "moment": "~2.5.0",
    "sequelize": "~2.0.0-dev1",
    "couch-pwd": "0.0.1"
  },
  "devDependencies": {
    "should": "~3.0.1",
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-mocha-test": "~0.8.2",
    "pg": "~2.11.0",
    "sqlite3": "~2.2.0",
    "mysql": "~2.0.1"
  },
  "readme": "# Lockit SQL adapter\n\n[![Build Status](https://travis-ci.org/zeMirco/lockit-sql-adapter.svg?branch=master)](https://travis-ci.org/zeMirco/lockit-sql-adapter) [![NPM version](https://badge.fury.io/js/lockit-sql-adapter.svg)](http://badge.fury.io/js/lockit-sql-adapter)\n\nSQL adapter for [Lockit](https://github.com/zeMirco/lockit).\n\n## Installation\n\n`npm install lockit-sql-adapter`\n\n```js\nvar adapter = require('lockit-sql-adapter');\n```\n\nThe adapter is built on top of [sequelize](http://sequelizejs.com/).\nThe following databases are supported:\n\n - MySQL\n - MariaDB (not yet tested but should work)\n - SQLite\n - PostgreSQL\n\nYou have to install the connector for your database of choice manually.\n\n```\nnpm install pg       # for postgres\nnpm install mysql    # for mysql\nnpm install sqlite3  # for sqlite\nnpm install mariasql # for mariasql\n```\n\n## Configuration\n\nThe following settings are required.\n\n```js\n// for postgres\nexports.db = {\n  url: 'postgres://127.0.0.1:5432/',\n  name: 'users',\n  collection: 'my_user_table'  // table name\n};\n\n// for mysql\n// exports.db = {\n//   url: 'mysql://127.0.0.1:3306/',\n//   name: 'users',\n//   collection: 'my_user_table'  // table name\n// };\n\n// for sqlite\n// exports.db = {\n//   url: 'sqlite://',\n//   name: ':memory:',\n//   collection: 'my_user_table'  // table name\n// };\n```\n\n## Features\n\n### 1. Create user\n\n`adapter.save(name, email, pass, callback)`\n\n - `name`: String - i.e. 'john'\n - `email`: String - i.e. 'john@email.com'\n - `pass`: String - i.e. 'password123'\n - `callback`: Function - `callback(err, user)` where `user` is the new user now in our database.\n\nThe `user` object has the following properties\n\n - `_id`: unique id\n - `name`: username chosen during sign up\n - `email`: email that was provided at the beginning\n - `salt`: salt generated by `crypto.randomBytes()`\n - `derived_key`: password hash generated by pbkdf2\n - `signupTimestamp`: Date object to remember when the user signed up\n - `signupToken`: unique token sent to user's email for email verification\n - `signupTokenExpires`: Date object usually 24h ahead of `signupTimestamp`\n - `failedLoginAttempts`: save failed login attempts during login process, default is `0`\n\n```js\nadapter.save('john', 'john@email.com', 'secret', function(err, user) {\n  if (err) console.log(err);\n  console.log(user);\n  // {\n  //   _id: 1,\n  //   name: 'john',\n  //   email: 'john@email.com',\n  //   derived_key: 'c4c7a83f7b3936437798316d4c7b8c7b731a55dc',\n  //   salt: 'ff449a4980a58a80c4ed80bddd34b8c9',\n  //   signupToken: '13eefbe7-6bc8-43f5-b27f-0bf0ca98b8db',\n  //   signupTimestamp: Fri Apr 11 2014 21:37:47 GMT+0200 (CEST),\n  //   signupTokenExpires: Sat Apr 12 2014 21:37:47 GMT+0200 (CEST),\n  //   failedLoginAttempts: 0,\n  //   emailVerificationTimestamp: null,\n  //   emailVerified: null,\n  //   pwdResetToken: null,\n  //   pwdResetTokenExpires: null,\n  //   accountLocked: null,\n  //   accountLockedUntil: null,\n  //   previousLoginTime: null,\n  //   previousLoginIp: null,\n  //   currentLoginTime: null,\n  //   currentLoginIp: null\n  // }\n});\n```\n\n### 2. Find user\n\n`adapter.find(match, query, callback)`\n\n - `match`: String - one of the following: 'name', 'email' or 'signupToken'\n - `query`: String - corresponds to `match`, i.e. 'john@email.com'\n - `callback`:  Function - `callback(err, user)`\n\n```js\nadapter.find('name', 'john', function(err, user) {\n  if (err) console.log(err);\n  console.log(user);\n  // {\n  //   _id: 1,\n  //   name: 'john',\n  //   email: 'john@email.com',\n  //   derived_key: '75b43d8393715cbf476ee55b12f888246d7f7015',\n  //   salt: 'f39f9a5104e5ae61347dced750b63b16',\n  //   signupToken: '6c93c6f8-06b6-4c6d-be58-1e89e8590d0f',\n  //   signupTimestamp: Fri Apr 11 2014 21:39:28 GMT+0200 (CEST),\n  //   signupTokenExpires: Sat Apr 12 2014 21:39:28 GMT+0200 (CEST),\n  //   failedLoginAttempts: 0,\n  //   emailVerificationTimestamp: null,\n  //   emailVerified: null,\n  //   pwdResetToken: null,\n  //   pwdResetTokenExpires: null,\n  //   accountLocked: null,\n  //   accountLockedUntil: null,\n  //   previousLoginTime: null,\n  //   previousLoginIp: null,\n  //   currentLoginTime: null,\n  //   currentLoginIp: null\n  // }\n});\n```\n\n### 3. Update user\n\n`adapter.update(user, callback)`\n\n - `user`: Object - must have `_id` key\n - `callback`: Function - `callback(err, user)` - `user` is the updated user object\n\n```js\n// get a user from db first\nadapter.find('name', 'john', function(err, user) {\n  if (err) console.log(err);\n\n  // add some new properties to our existing user\n  user.firstOldKey = 'and some value';\n  user.secondOldKey = true;\n\n  // save updated user to db\n  adapter.update(user, function(err, user) {\n    if (err) console.log(err);\n    // ...\n  });\n});\n```\n\n### 4. Delete user\n\n`adapter.remove(name, callback)`\n\n - `name`: String\n - `callback`: Function - `callback(err, res)` - `res` is `true` if everything went fine\n\n```js\nadapter.remove('john', function(err, res) {\n  if (err) console.log(err);\n  console.log(res);\n  // true\n});\n```\n\n## Test\n\n`grunt`\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zeMirco/lockit-sql-adapter/issues"
  },
  "homepage": "https://github.com/zeMirco/lockit-sql-adapter",
  "_id": "lockit-sql-adapter@0.5.0",
  "_from": "lockit-sql-adapter@0.5.0"
}
